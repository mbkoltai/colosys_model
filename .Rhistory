which(dataframe[,target_column_number] %in% dataframe[paths_indices_x1_x2, source_column_number] &
dataframe[,source_column_number] %in% source),
# x1 -> x2
paths_indices_x1_x2,
# x2 -> target
which(dataframe[,source_column_number] %in% dataframe[paths_indices_x1_x2, target_column_number] &
dataframe[,target_column_number] %in% target) )
}
pypath_dataframe[function_two_intermediate_nodes_path("MAPKAPK2", "CDC25B", pypath_dataframe, 1, 3),1:4]
pypath_dataframe[function_two_intermediate_nodes_path("CDC25B", "CSNK2A1", pypath_dataframe, 1, 3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("CDC25B", "CSNK2A1", pypath_dataframe, 1, 3),1:4]
pypath_dataframe[function_three_intermediate_nodes_path("CDC25B", "CSNK2A1", pypath_dataframe, 1, 3),1:4]
pypath_dataframe[function_three_intermediate_nodes_central_node("CDC25B", "CSNK2A1", pypath_dataframe, 1, 3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("CDC25B", "CSNK2A1", pypath_dataframe, 1, 3),1:4]
function_find_row_interaction("CSNK2A1","CDC25B", pypath_dataframe)
function_find_row_interaction("CDK1","CDC25B", pypath_dataframe)
pypath_dataframe[function_find_row_interaction("CDK1","CDC25B", pypath_dataframe),1:4]
pypath_dataframe[function_find_row_interaction("CDK1","CSNK2A1", pypath_dataframe),1:4]
pypath_dataframe[function_first_common_neigbour_directed("CDC25B","CSNK2A1", pypath_dataframe),1:4]
pypath_dataframe[function_first_common_neigbour_directed("CDC25B","CSNK2A1", pypath_dataframe,1,3),1:4]
intersect(pypath_dataframe[pypath_dataframe[,3]=="CDC25B", 1],
pypath_dataframe[pypath_dataframe[,1]=="CSNK2A1", 3])
function_first_common_neigbour_directed("CDC25B","CSNK2A1", pypath_dataframe,1,3)
intersect(which(pypath_dataframe[,3]=="CDC25B"), which(pypath_dataframe[,1]=="CSNK2A1"))
which(pypath_dataframe[,3]=="CDC25B")
which(pypath_dataframe[,1]=="CSNK2A1")
intersect(pypath_dataframe[pypath_dataframe[,1]=="CDC25B", 3], pypath_dataframe[pypath_dataframe[,3]=="CSNK2A1", 1])
intersect(which(pypath_dataframe[,3]=="CDC25B"), which(pypath_dataframe[,1]=="CSNK2A1"))
intersect(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1"))
c(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1"))
pypath_dataframe[c(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1")),1:3]
pypath_dataframe[pypath_dataframe[,1]=="CDC25B" & pypath_dataframe[,3]=="CSNK2A1",1:3]
pypath_dataframe[pypath_dataframe[,1]=="CDC25B" && pypath_dataframe[,3]=="CSNK2A1",1:3]
pypath_dataframe[c(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1")),1:3]
c(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1"))
c(which(pypath_dataframe[,1]==first_neighbour), which(pypath_dataframe[,3]==first_neighbour))
first_neighbour <- "CDK1"
c(which(pypath_dataframe[,1]==first_neighbour), which(pypath_dataframe[,3]==first_neighbour))
intersect(c(which(pypath_dataframe[,1]=="CDC25B"), which(pypath_dataframe[,3]=="CSNK2A1")), c(which(pypath_dataframe[,1]==first_neighbour), which(pypath_dataframe[,3]==first_neighbour)))
function_first_common_neigbour_directed <- function(source,target,dataframe,source_column_number, target_column_number) {
first_neighbour <- intersect(dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==target, source_column_number])
intersect( c(which(pypath_dataframe[,source_column_number]==source), which(pypath_dataframe[,target_column_number]==target)),
c(which(pypath_dataframe[,source_column_number]==first_neighbour), which(pypath_dataframe[,target_column_number]==first_neighbour)) )
}
function_first_common_neigbour_directed("CDC25B","CSNK2A1", pypath_dataframe,1,3)
pypath_dataframe[function_first_common_neigbour_directed("CDC25B","CSNK2A1", pypath_dataframe,1,3),1:3]
pypath_dataframe[function_first_common_neigbour_directed("MAPKAPK2","CDC25B", pypath_dataframe,1,3),1:3]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% c("RPA32","53BP1")]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% c("RPA2","TP53BP1")]
function_first_common_neigbour_directed("TP53BP1",toymodel_nodes, pypath_dataframe,1,3)
function_first_common_neigbour_directed("TP53BP1",toymodel_nodes[1], pypath_dataframe,1,3)
function_first_common_neigbour_directed("TP53BP1",toymodel_nodes[2], pypath_dataframe,1,3)
function_first_common_neigbour_directed("TP53BP1",toymodel_nodes[3], pypath_dataframe,1,3)
toymodel_nodes
length(toymodel_nodes)
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% toymodel_nodes]
apply(toymodel_nodes,1, function(r) function_find_row_interaction("TP53BP1",r, pypath_dataframe,1,3))
lapply(toymodel_nodes,1, function(r) function_find_row_interaction("TP53BP1",r, pypath_dataframe,1,3))
lapply(toymodel_nodes, function(r) function_find_row_interaction("TP53BP1",r, pypath_dataframe,1,3))
lapply(1:27, function(x) SIGNOR_CRC_relations_result[,1:x])
# lapply(lapply( lapply(1:ncol(SIGNOR_CRC_relations_result), function(x) SIGNOR_CRC_relations_result[,1:x]), duplicated), sum)
# lapply(1:ncol(SIGNOR_CRC_relations_result), function(x) SIGNOR_CRC_relations_result[,1:x])
lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction("TP53BP1",toymodel_nodes[r], pypath_dataframe,1,3))
lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction("TP53BP1",toymodel_nodes[r], pypath_dataframe))
unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction("TP53BP1",toymodel_nodes[r], pypath_dataframe)))
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction("TP53BP1",toymodel_nodes[r], pypath_dataframe))),1:3]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction("TP53BP1",toymodel_nodes[r], pypath_dataframe))),1:4]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_first_common_neigbour_directed("TP53BP1",toymodel_nodes[r], pypath_dataframe,1,3))),1:4]
unlist(lapply(1:length(toymodel_nodes), function(r) function_first_common_neigbour_directed("TP53BP1",toymodel_nodes[r], pypath_dataframe,1,3)))
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(new_node,toymodel_nodes[r], pypath_dataframe))),1:3]
new_node <- "TP53BP1"
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(new_node,toymodel_nodes[r], pypath_dataframe))),1:3]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(toymodel_nodes[r], new_node, pypath_dataframe))),1:3]
unlist(lapply(1:length(toymodel_nodes), function(r) function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3)))
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),1:4]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),c(1:4,7:8)]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
new_node, function_first_common_neigbour_directed(toymodel_nodes[r], pypath_dataframe,1,3))),1:4]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),1:4]
new_node <- "RPA2"
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(new_node,toymodel_nodes[r], pypath_dataframe))),1:3]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% toymodel_nodes]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "RPA2"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "TP53BP1"]
new_node <- "MAPK8"
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(new_node,toymodel_nodes[r], pypath_dataframe))),1:3]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),1:4]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))), c(1:4,7:8)]
function_three_intermediate_nodes_path("MAPK1", "H2AFX", pypath_directed_interactions_HGNC_UNIPROT_databases_references, 1, 3)
function_three_intermediate_nodes_path("MAPK1", "H2AFX", pypath_dataframe, 1, 3)
function_three_intermediate_nodes_central_node("MAPK1", "H2AFX", pypath_dataframe, 1, 3)
function_two_intermediate_nodes_path("MAPK1", "H2AFX", pypath_dataframe, 1, 3)
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:4]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c(which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
target_first_neighbor_interaction_row_number <- which(dataframe[,source_column_number]==central_node &
dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
}
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:4]
function_three_intermediate_nodes_central_node("MAPK1", "H2AFX", pypath_dataframe, 1, 3)
central_node <- function_three_intermediate_nodes_central_node("MAPK1", "H2AFX", pypath_dataframe, 1, 3)
central_node
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_find_row_interaction("GRB10","MAPK1",pypath_dataframe)
pypath_dataframe[function_find_row_interaction("GRB10","MAPK1",pypath_dataframe),1:3]
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
}
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
pypath_dataframe[function_find_row_interaction("GRB10","MAPK1",pypath_dataframe),1:3]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor )
}
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
c(source,source_first_neighbor)
}
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number]==source & dataframe[, target_column_number]==source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
source_first_neighbor
}
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number]==source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number] %in% source & dataframe[, target_column_number] %in% source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
}
function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3)
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number] %in% source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number] %in% source & dataframe[, target_column_number] %in% source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number]==source_first_neighbor & dataframe[,target_column_number]==central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number]==central_node & dataframe[,target_column_number]==target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number]==target_first_neighbor & dataframe[,target_column_number]==target ) )
}
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number] %in% source, target_column_number],
dataframe[dataframe[,target_column_number]==central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number]==target, source_column_number],
dataframe[dataframe[,source_column_number]==central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number] %in% source & dataframe[, target_column_number] %in% source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number] %in% source_first_neighbor & dataframe[,target_column_number] %in% central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number] %in% central_node & dataframe[,target_column_number] %in% target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number] %in% target_first_neighbor & dataframe[,target_column_number] %in% target ) )
}
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
function_three_intermediate_nodes_path <- function(central_node, source, target, dataframe, source_column_number, target_column_number) {
# central_node <- function_three_intermediate_nodes_central_node(source, target, pypath_dataframe, 1, 3)
source_first_neighbor <- intersect( dataframe[dataframe[,source_column_number] %in% source, target_column_number],
dataframe[dataframe[,target_column_number] %in% central_node, source_column_number])
target_first_neighbor <- intersect( dataframe[dataframe[,target_column_number] %in% target, source_column_number],
dataframe[dataframe[,source_column_number] %in% central_node, target_column_number])
# source -> source's 1st neighbour row
c( # source -> source's 1st neighbour row
which( dataframe[,source_column_number] %in% source & dataframe[, target_column_number] %in% source_first_neighbor ),
# source's 1st neighbour row -> central node
which( dataframe[,source_column_number] %in% source_first_neighbor & dataframe[,target_column_number] %in% central_node ),
# central node -> target's first neigbour
which(dataframe[,source_column_number] %in% central_node & dataframe[,target_column_number] %in% target_first_neighbor),
# target's first neigbour -> target
which( dataframe[,source_column_number] %in% target_first_neighbor & dataframe[,target_column_number] %in% target ) )
}
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "H2AFX", pypath_dataframe, 1, 3),1:3]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "CDC25B"]
function_find_row_interaction("CDC25","CDC25B", pypath_dataframe)
function_find_row_interaction("CDC25A","CDC25B", pypath_dataframe)
function_three_intermediate_nodes_path("MAPK1", "CDC25B", pypath_dataframe, 1, 3)
rm(function_two_intermediate_node_path)
new_node <- "CDC25B"
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r) function_find_row_interaction(new_node,toymodel_nodes[r], pypath_dataframe))),1:3]
pypath_dataframe[unlist(lapply(1:length(toymodel_nodes), function(r)
function_first_common_neigbour_directed(toymodel_nodes[r], new_node, pypath_dataframe,1,3))),1:4]
toymodel_nodes
toymodel_nodes %in% "CDC25B"
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "CDK1", pypath_dataframe, 1, 3),1:3]
pypath_dataframe[function_three_intermediate_nodes_path(central_node[1], "MAPK1", "CDK1", pypath_dataframe, 1, 3),1:4]
function_find_row_interaction("ABL1","CDK1", pypath_dataframe)
function_first_common_neigbour_directed("ABL1","CDK1", pypath_dataframe,1,3)
central_node
function_three_intermediate_nodes_central_node("MAPK1", "CDK1", pypath_dataframe, 1, 3)
function_two_intermediate_nodes_path("MAPK1", "CDK1", pypath_dataframe, 1, 3)
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1", "CDK1", pypath_dataframe, 1, 3), 1:4]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1", "CDK1", pypath_dataframe, 1, 3), 1:4]
function_first_common_neigbour_directed("MAPK1","CDK1", pypath_dataframe,1,3)
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDK1", pypath_dataframe,1,3),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "CDC25C"]
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDC25C", pypath_dataframe,1,3),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "LRP6"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "GSK3B"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "E2F1"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "MYC"]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1","CDC25C", pypath_dataframe,1,3),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "DUSP1"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "MAPK9"]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1","CDC25C", pypath_dataframe,1,3),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "MAPK8"]
function_find_row_interaction("CDC25C","CDK1", pypath_dataframe)
pypath_dataframe[function_find_row_interaction("CDC25C","CDK1", pypath_dataframe), 1:3]
pypath_dataframe[function_find_row_interaction("CDC25C","CDK1", pypath_dataframe), 1:4]
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDK1", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("MAPKAPK2","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_two_intermediate_nodes_path("MAPKAPK2","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_find_row_interaction("MAPK1","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("RPS6KA1","CDC25B", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_find_row_interaction("RPS6KA1","CDC25B", pypath_dataframe),1:4]
pypath_dataframe[function_find_row_interaction("RPS6KA1","MAPK1", pypath_dataframe),1:4]
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDC25A", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1","CDC25A", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_first_common_neigbour_directed("MAPK1","CDC25A", pypath_dataframe,1,3),1:4]
pypath_dataframe[function_find_row_interaction("MAPK1","CDC25A", pypath_dataframe),1:4]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "CDKN1A"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "CDKN@A"]
HGNC_uniprot_fullgenome$uniprot_ID[HGNC_uniprot_fullgenome$HGNC_gene_symbol %in% "CDKN2A"]
pypath_dataframe[function_two_intermediate_nodes_path("MAPK1","CDC25A", pypath_dataframe,1,3),1:4]
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
biocLite("CellNOptR")
library(devtools)
install_github("saezlab/CNORode2017")
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
biocLite("CellNOptR")
# .libPaths( "/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
# /bioinfo/local/build/R/R/lib64/R/include
R.home('include')
library("stringr", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
library("devtools", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
# biocLite("CellNOptR")
# .libPaths( "/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
.libPaths()
# /bioinfo/local/build/Centos/R/rstudio/rstudio
biocLite("CellNOptR")
library("igraph")
data(CNOlistToy,package="CellNOptR")
data(ToyModel,package="CellNOptR")
?data
pknmodel = ToyModel
pknmodel
class(pknmodel)
dim(pknmodel)
pknmodel$reacID
pknmodel$namesSpecies
biocLite("CNORdt")
cnolist = CNOlist(CNOlistToy)
pknmodel
cnolist = CNOlist(CNOlistToy)
CellNOptR::
CellNOptR
?CellNOptR
??CellNOptR
CNOlistToy
makeCNOlist
install.packages("/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.3/CellNOptR_1.22.0.tar.gz", repos = NULL, type = "source")
# /bioinfo/local/build/Centos/R/rstudio/rstudio
# /bioinfo/local/build/Centos/R/rstudio/rstudio-1.0.143/bin/rstudio
biocLite("CellNOptR")
library("biocLite")
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
biocLite("CellNOptR")
installed.packages() %>% .[, c("Package", "LibPath")]
version
version
version
biocLite("CellNOptR")
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
biocLite("CellNOptR")
install.packages("hash")
biocLite("CellNOptR")
library("hash", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
biocLite("CellNOptR")
.libPaths()
biocLite()
??biocLite
# biocLite("CellNOptR", lib="")
.libPaths()
biocLite("CellNOptR", lib="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
# library("hash", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
.libPaths()
biocLite("CellNOptR", lib="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
detach("package:BiocInstaller", unload=TRUE)
install.packages("BiocInstaller")
library("BiocInstaller", lib.loc="/bioinfo/local/build/R/R-3.3.2_centos/lib64/R/library")
install.packages("hash", lib = "/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.3/")
library("hash", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
biocLite("CellNOptR", lib="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
.libPaths()
.libPaths()[4][1]
.libPaths()[4][1] <- ""
rm(.libPaths()[4][1])
.libPaths()[4]
rm(.libPaths()[4])
detach("package:hash", unload=TRUE)
library("hash", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.3/hash/")
library("hash", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.3/")
?hash
biocLite("CellNOptR", lib="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.3/")
.libPaths()
Sys.which()
Sys.which("R")
Sys.which("R")
library("CellNOptR", lib.loc="/bioinfo/users/mkoltai/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:BiocGenerics", unload=TRUE)
detach("package:datasets", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:methods", unload=TRUE)
library("methods", lib.loc="/usr/lib64/R/library")
detach("package:methods", unload=TRUE)
detach("package:parallel", unload=TRUE)
detach("package:RColorBrewer", unload=TRUE)
detach("package:reshape2", unload=TRUE)
detach("package:scales", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
install.packages("Rgraphviz", type ='source')
utils::install.packages("Rgraphviz", type ='source')
version()
library(utils)
version()
library(methods)
version()
version
?gnls
gnls?
??gnls
R.version
R.version
library("pillar", lib.loc="/bioinfo/local/build/Centos/R/R-3.5.0/lib64/R/library")
remove.packages("pillar", lib="/bioinfo/local/build/Centos/R/R-3.5.0/lib64/R/library")
library(ggplot2)
library("stringr", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
library(reshape2); library(readr); library(tidyr); library(dplyr);
library(pracma); library(gridExtra); library(nlme); library("pryr", lib.loc="/bioinfo/users/mkoltai/R/x86_64-redhat-linux-gnu-library/3.4")
Sys.getenv()
Sys.setenv(LANG = "en")
fsgsdfgfd
Sys.getenv()
library(readr); library(plyr); library(dplyr); library(tidyr)
# load SIGNOR network (PATH!!)
SIGNOR_all=read_tsv("network_paths/SIGNOR_all_simplified.tsv")
# load the functions to run the script, function file should be in same directory
source("network_paths/pathfinder_functions.R")
# names for columns
colnames_table=c("x4","i4","x3","i3","x2","i2","x1","i1","x0"); colnames_3cols=c("source","interaction","target")
source_column_number=1; target_column_number=3
setwd("~/research/models/KRAS_DNA_repair_model/network_paths/")
SIGNOR_all=read_tsv("network_paths/SIGNOR_all_simplified.tsv")
setwd("~/research/models/KRAS_DNA_repair_model/")
SIGNOR_all=read_tsv("network_paths/SIGNOR_all_simplified.tsv")
source("network_paths/pathfinder_functions.R")
colnames_table=c("x4","i4","x3","i3","x2","i2","x1","i1","x0"); colnames_3cols=c("source","interaction","target")
source_column_number=1; target_column_number=3
source_nodes = c("SMAD4","NCK1","TRIP12","CUBN","AKR1B15");
target_nodes = c("KRAS","CHEK1","MAPKAPK2","CDC25B","ATM","ATR","FANCD2")
# RUN SCRIPT
sample_path <- function_screen_model_paths(SIGNOR_all, source_nodes, target_nodes, 1, 3, colnames_table)
sample_path
sample_path <- function_screen_model_paths(SIGNOR_all, "FGFR", "KRAs", 1, 3, colnames_table)
sample_path <- function_screen_model_paths(SIGNOR_all, "FGFR", "KRAS", 1, 3, colnames_table)
sample_path <- function_screen_model_paths(SIGNOR_all, c("FGFR"), c("KRAS"), 1, 3, colnames_table)
mutation_num_genes = read_csv("data/mutation/mutation_num_genes.csv")
mutation_num_genes
mutation_nodes=as.character(unique(mutation_num_genes$variable[mutation_num_genes$value>=4])[!grepl("KRAS|BRAF|MSI",unique(mutation_num_genes$variable[mutation_num_genes$value>=4]))])
mutation_nodes=gsub("\\(","",sapply(strsplit(mutation_nodes,"_"), "[[",1))
mutation_nodes
model_nodes = c("KRAS","CHEK1","MAPKAPK2","CDC25B","ATM","ATR","FANCD2")
paths_mutations_model <- function_screen_model_paths(SIGNOR_all,mutation_nodes,model_nodes,1,3,colnames_table)
paths_mutations_model
mutation_nodes
head(SIGNOR_all)
function_screen_model_paths(SIGNOR_all,mutation_nodes,"KRAS",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"EGFR","KRAS",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"FGFR","KRAS",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"TGFA","KRAS",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"FGFR1","KRAS",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"IGFR","PI3K",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"IGF1R","PIK3CA",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"FGFR1","PIK3CA",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"KRAS","BRAF",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"BRAF","MEK1",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"BRAF","MEK1/2",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"BRAF","MKK4",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"BRAF","MKK7",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"BRAF","MAP2K4",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MEK1/2","MAP2K4",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"mTORC2","AKT",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"PI3KCA","mTORC2",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"PIK3CA","mTORC2",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"mTORC1","RPS6",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"mTORC1","TP53",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MEK1/2","ERK",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MEK1/2","ERK1/2",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MAP2K4","MAPK14",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MAPK14","MAPK8",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MAPK14","MAPK1",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"MAPK14","CHEK1",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"ATR","MAPK14",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"ATR","MAPK11",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"ATR","MAPK12",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"ATR","MAPK13",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"ATR","MAPK14",1,3,colnames_table)
function_screen_model_paths(SIGNOR_all,"CHEK1","CDC25C",1,3,colnames_table)
data("bolus")
setwd("~/research/models/KRAS_DNA_repair_model")
wes_facs_filepath="data/wes_facs/"
